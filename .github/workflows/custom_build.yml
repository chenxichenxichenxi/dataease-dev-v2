name: Release Builder

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Target Branch"
        required: true
        default: "master"
      tag:
        description: "Release Tag (格式: vX.Y.Z)"
        required: true
        default: "v1.0.0"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch }}
      
    - name: Cache local Maven repository
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
          
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: 21
        distribution: 'temurin'
        cache: 'maven'
        
    - name: Fix POM version issue
      run: |
        # 替换POM中的变量为实际版本号
        VERSION=$(echo ${{ github.event.inputs.tag }} | sed 's/^v//')
        sed -i "s/\${dataease.version}/$VERSION/g" pom.xml
        sed -i "s/\${dataease.version}/$VERSION/g" core/pom.xml
        
    - name: Build with Maven
      run: |
        # 先构建父POM
        mvn clean install -N -Dmaven.test.skip=true
        
        # 检查实际模块结构并构建
        if [ -f "core/pom.xml" ]; then
          cd core
          # 尝试直接构建core模块（不依赖可能缺失的子模块）
          mvn clean package -Pdesktop -U -Dmaven.test.skip=true -pl !core-backend
          
          # 查找生成的JAR文件
          JAR_PATH=$(find . -name "*.jar" -not -name "*-sources.jar" -not -name "*-javadoc.jar" | head -n 1)
          if [ -z "$JAR_PATH" ]; then
            echo "::error::No JAR file found after build"
            exit 1
          fi
          echo "JAR_PATH=core/$JAR_PATH" >> $GITHUB_ENV
        else
          echo "::error::core/pom.xml not found"
          exit 1
        fi
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.tag }}
        release_name: Release ${{ github.event.inputs.tag }}
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.JAR_PATH }}
        asset_name: CoreApplication-${{ github.event.inputs.tag }}.jar
        asset_content_type: application/java-archive