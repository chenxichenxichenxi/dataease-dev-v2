name: Release Builder

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Target Branch"
        required: true
        default: "master"
      tag:
        description: "Release Tag (格式: vX.Y.Z)"
        required: true
        default: "v1.0.0"

permissions:
  contents: write  # 必须添加这个权限才能创建release

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch }}
      
    - name: Cache local Maven repository
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
          
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: 21
        distribution: 'temurin'
        cache: 'maven'
        
    - name: Fix POM files
      run: |
        # 提取纯净版本号（去掉v前缀）
        VERSION=$(echo ${{ github.event.inputs.tag }} | sed 's/^v//')
        
        # 修复所有POM文件中的版本变量
        find . -name pom.xml -exec sed -i "s/\${dataease.version}/$VERSION/g" {} \;
        
        # 修复core模块的子模块引用（如果core-backend不存在）
        if [ ! -d "core/core-backend" ]; then
          sed -i '/<module>core-backend<\/module>/d' core/pom.xml
        fi
        
    - name: Build with Maven
      run: |
        # 先安装父POM
        mvn clean install -N -Dmaven.test.skip=true
        
        # 构建core模块
        cd core
        mvn clean package -Pdesktop -U -Dmaven.test.skip=true
        
        # 查找backend的JAR文件（确保找的是backend不是frontend）
        if [ -d "core-backend/target" ]; then
          JAR_PATH="core/core-backend/target/$(ls core-backend/target | grep -E '\.jar$' | grep -v -E '-(sources|javadoc)\.jar$' | head -n 1)"
        elif [ -d "backend/target" ]; then
          JAR_PATH="core/backend/target/$(ls backend/target | grep -E '\.jar$' | grep -v -E '-(sources|javadoc)\.jar$' | head -n 1)"
        else
          echo "::error::Could not find backend JAR file"
          exit 1
        fi
        
        echo "JAR_PATH=${JAR_PATH}" >> $GITHUB_ENV
        echo "Found JAR at: ${JAR_PATH}"
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.tag }}
        release_name: Release ${{ github.event.inputs.tag }}
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      if: success() && env.JAR_PATH != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.JAR_PATH }}
        asset_name: CoreApplication-${{ github.event.inputs.tag }}.jar
        asset_content_type: application/java-archive